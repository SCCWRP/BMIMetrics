View(data.agg)
?sample
is.generic(sample)
methods(sample)
sample <- function(x, ...){
UseMethod(sample, x)
}
sample(1:10)
sample(1:10, 5)
sample <- function(x, ...){
UseMethod("sample", x)
}
sample(1:10, 5)
rm(sample)
sample(1:10)
?UseMethod
method(sample)
methods(sample)
?generic
sample.default <- sample()
sample <- function(x, ...){
UseMethod("sample", x)
}
sample.default <- function(x, ...)sample(x, ...)
sample <- function(x, ...){
UseMethod("sample", x)
}
sample(1:10)
sample.default <- function(x, ...)sample(x, ...)
sample(1:10)
?sample
?subsample
source('~/.active-rstudio-document', echo=TRUE)
traceback()
source('~/.active-rstudio-document', echo=TRUE)
setGenericS3(sample)
setGenericS3("sample")
sample(1:10)
rm(list=c("sample", "sample.default", "setGenericS3"))
rm(list=c("setGenericS3.default"))
?UseMethod
sample
source('~/.active-rstudio-document', echo=TRUE)
sample(1:10)
source('P:/PartTimers/MarkEngeln/BMI_Metrics/R/aggregate.r', echo=TRUE)
View(data.agg)
source('P:/PartTimers/MarkEngeln/BMI_Metrics/R/sample.r', echo=TRUE)
sample(data.agg)
library(vegan)
sample(data.agg)
source('P:/PartTimers/MarkEngeln/BMI_Metrics/R/sample.r', echo=TRUE)
data.ready <- sample(data.agg)
View(data.ready)
?matchArg
?match.arg
?switch
centre <- function(x, type) {
switch(type,
mean = mean(x),
median = median(x),
trimmed = mean(x, trim = .1))
}
centre(1:10, "mean")
centre(1:10, c("mean", "median")
)
unique(taxa$Class)
unique(taxa$Order)
grep(taxa, "Acari")
fix(data.ready)
View(data.ready)
source('~/.active-rstudio-document', echo=TRUE)
Acari_Percent(data.agg)
source('~/.active-rstudio-document', echo=TRUE)
Acari_Percent(data.agg)
source('~/.active-rstudio-document', echo=TRUE)
Acari_Percent(data.agg)
View(data)
loadMetaData <- function()read.csv("Metadata/taxontable_merged.csv", stringsAsFactors=F
)
loadMetaData
loadMetaData()
unique(taxa$Habit)
Acari_Taxa(data.agg)
source('~/.active-rstudio-document', echo=TRUE)
Acari_Taxa(data.agg)
Acari_Taxa(data.ready)
source('P:/PartTimers/MarkEngeln/BMI_Metrics/R/Amphipoda.r', echo=TRUE)
Amphipoda_Percent(data.agg)
Amphipoda_Percent(data.ready)
source('P:/PartTimers/MarkEngeln/BMI_Metrics/R/Burrower.r', echo=TRUE)
Burrower_Percent(data.agg)
source('~/.active-rstudio-document', echo=TRUE)
Burrower_Percent(data.ready)
source('~/.active-rstudio-document', echo=TRUE)
Burrower_Percent(data.ready)
Burrower_Percent(data.ready)
source('P:/PartTimers/MarkEngeln/BMI_Metrics/R/Burrower.r', echo=TRUE)
Burrower_Percent(data.ready)
source('~/.active-rstudio-document', echo=TRUE)
Burrower_Percent(data.ready)
source('~/.active-rstudio-document', echo=TRUE)
Burrower_Percent(data.ready)
source('P:/PartTimers/MarkEngeln/BMI_Metrics/R/Burrower.r', echo=TRUE)
Burrower_Percent(data.ready)
source('P:/PartTimers/MarkEngeln/BMI_Metrics/R/Burrower.r', echo=TRUE)
Burrower_Percent(data.ready)
source('P:/PartTimers/MarkEngeln/BMI_Metrics/R/CGCG.r', echo=TRUE)
CFCG_Taxa(data.agg)
CFCG_Percent(data.agg)
source('~/.active-rstudio-document', echo=TRUE)
CFCG_Percent(data.agg)
?shannon
?diversity
source('P:/PartTimers/MarkEngeln/BMI_Metrics/R/Chironomidae.r', echo=TRUE)
View(data.ready)
?diversity
level
deparse(substitute("SAFIT1"))
?cast
library(reshape)
?cast
?as.formula
?diversity
source('P:/PartTimers/MarkEngeln/BMI_Metrics/R/Total_Taxa.r', echo=TRUE)
Shannon_Diversity(data.gg)
Shannon_Diversity(data.agg)
traceback()
source('~/.active-rstudio-document', echo=TRUE)
traceback()
Shannon_Diversity(data.agg)
?as.formula
source('P:/PartTimers/MarkEngeln/BMI_Metrics/R/Total_Taxa.r', echo=TRUE)
Shannon_Diversity(data.agg)
source('~/.active-rstudio-document', echo=TRUE)
Shannon_Diversity(data.agg)
Shannon_Diversity(data.ready)
source('~/.active-rstudio-document', echo=TRUE)
Shannon_Diversity(data.ready)
source('P:/PartTimers/MarkEngeln/BMI_Metrics/R/Total_Taxa.r', echo=TRUE)
Shannon_Diversity(data.ready)
Simpson_Diversity(data.gg)
Simpson_Diversity(data.agg)
}
library(roxygen2
)
roxygenise("../BMI_Metrics")
roxygenise("../BMI_Metrics")
library(roxygen2)
roxygenize("../BMI_Metrics/")
roxygenize("../BMI_Metrics/")
roxygenize("../BMI_Metrics/")
roxygenize("../BMI_Metrics/")
loadMetaData <- function()read.csv("Metadata/taxontable_merged.csv", stringsAsFactors=F)
loadMetaData()
metadata <- loadMetaData()
View(metadata)
str(metadata)
save(metadata, file="inst/metadata.r")
save(metadata, file="inst/metadata.rdata")
?source
source(list.files("r"))
list.files("r")
sapply(list.files("r"), source)
sapply(list.files("r"), function(file)source(paste("r/", file, sep="")))
bugdata <- read.csv("val.bugs2.csv")
bugdata <- read.csv("misc/val.bugs2.csv")
bugdata.agg <- aggregate(bugdata)
class(bugdata) <- "BMI"
bugdata.agg <- aggregate(bugdata)
traceback()
source('P:/PartTimers/MarkEngeln/BMI_Metrics/R/aggregate.r', echo=TRUE)
bugdata.agg <- aggregate(bugdata)
source('~/.active-rstudio-document', echo=TRUE)
bugdata.agg <- aggregate(bugdata)
traceback()
View(bugdata)
class(bugdata) <- c("BMI", "data.frame")
View(bugdata)
source('~/.active-rstudio-document', echo=TRUE)
bugdata.agg <- aggregate(bugdata)
source('~/.active-rstudio-document', echo=TRUE)
bugdata.agg <- aggregate(bugdata)
source('P:/PartTimers/MarkEngeln/BMI_Metrics/R/aggregate.r', echo=TRUE)
bugdata.agg <- aggregate(bugdata)
source('P:/PartTimers/MarkEngeln/BMI_Metrics/R/aggregate.r', echo=TRUE)
bugdata.agg <- aggregate(bugdata)
loadMetaData()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
bugdata.agg <- aggregate(bugdata)
source('P:/PartTimers/MarkEngeln/BMI_Metrics/R/loadMetaData.r', echo=TRUE)
source('P:/PartTimers/MarkEngeln/BMI_Metrics/R/aggregate.r', echo=TRUE)
bugdata.agg <- aggregate(bugdata)
bugdata.prc <- sample(bugdata.agg)
View(bugdata.prc)
methods(sample)
View(bugdata.agg)
source('P:/PartTimers/MarkEngeln/BMI_Metrics/R/sample.r', echo=TRUE)
bugdata.prc <- sample(bugdata.agg)
bugdata.prc <- sample.BMIagg(bugdata.agg)
bugdata2 <- sample(bugdata.agg)
library(vegan)
bugdata2 <- sample(bugdata.agg)
View(bugdata.prc)
source('P:/PartTimers/MarkEngeln/BMI_Metrics/R/sample.r', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
bugdata2 <- sample(bugdata.agg)
source('~/.active-rstudio-document', echo=TRUE)
bugdata2 <- sample(bugdata.agg)
source('P:/PartTimers/MarkEngeln/BMI_Metrics/R/sample.r', echo=TRUE)
bugdata2 <- sample(bugdata.agg)
source('~/.active-rstudio-document', echo=TRUE)
bugdata2 <- sample(bugdata.agg)
View(bugdata.agg)
source('P:/PartTimers/MarkEngeln/BMI_Metrics/R/aggregate.r', echo=TRUE)
bugdata.agg <- aggregate(bugdata)
bugdata2 <- sample(bugdata.agg)
View(bugdata2)
?aggregate
Shannon_Diversity(bugdata2)
source('P:/PartTimers/MarkEngeln/BMI_Metrics/R/sample.r', echo=TRUE)
View(bugdata)
1:3 %in% 1:2
names(bugdata)
sum(1:3 %in% 1:2)
?error
?err
?stop
?match
?setdiff
c(bugdata$FinalID, bugdata$LifeStageCode)
c(as.character(bugdata$FinalID), as.character(bugdata$LifeStageCode))
paste(as.character(bugdata$FinalID), as.character(bugdata$LifeStageCode))
paste(as.character(bugdata$FinalID), as.character(bugdata$LifeStageCode)) %in%
paste(metadata$FinalID, metadata$LifeStageCode)
which(paste(as.character(bugdata$FinalID), as.character(bugdata$LifeStageCode)) %in%
paste(metadata$FinalID, metadata$LifeStageCode))
is.integer
is.integer(bugdata$BAResult)
?is.integer
is.integer(1)
abs(bugdata$BAResult - round(bugdata$BAResult))
(bugdata$BAResult - round(bugdata$BAResult)) %in% 0
bugdata$BAResult
fix(bugdata)
?show
bugdata
source('P:/PartTimers/MarkEngeln/BMI_Metrics/R/BMI.r', echo=TRUE)
bugdata1 <- bugdata
class(bugdata1) <- "data.frame"
BMI(bugdata1)
View(BMI(bugdata1))
View(BMI(bugdata1[, 4:10]))
source('~/.active-rstudio-document', echo=TRUE)
View(BMI(bugdata1[, 4:10]))
traceback()
BMI(bugdata1[, 4:10])
source('P:/PartTimers/MarkEngeln/BMI_Metrics/R/BMI.r', echo=TRUE)
BMI(bugdata1[, 4:10])
BMI(bugdata1)
bugdata <- read.csv("data/val.bugs2.csv")
View(bugdata)
bugdata <- bugdata[, c(-1, -7)]
View(bugdata)
length(unique(bugdata$StationCode))
bugdata <- read.csv("data/val.bugs2.csv")
View(bugdata)
bugdata <- bugdata[, c(-1, -5, -7)]
View(bugdata)
str(bugdata)
?factor
bugdata$StationCode <- factor(bugdata$StationCode, labels=rep(sample(LETTERS, 9), length(unique(bugdata$StationCode))))
rep(sample(LETTERS, 9), length(unique(bugdata$StationCode)))
rep(sample(LETTERS, 9, collapse=""), length(unique(bugdata$StationCode)))
rep(sample(LETTERS, 9, collapse=""), length(unique(bugdata$StationCode)))
?sample
rep(paste(sample(LETTERS, 9), collapse=""), length(unique(bugdata$StationCode)))
sapply(1:length(unique(bugdata$StationCode), function(i)paste(sample(LETTERS, 9), collapse="")))
1:length(unique(bugdata$StationCode)
sapply(1:length(unique(bugdata$StationCode)), function(i)paste(sample(LETTERS, 9), collapse=""))
sapply(1:length(unique(bugdata$StationCode)), function(i)paste(sample(LETTERS, 9), collapse=""))
bugdata$StationCode <- factor(bugdata$StationCode,
labels=sapply(1:length(unique(bugdata$StationCode)), function(i)paste(sample(LETTERS, 9), collapse="")))
View(bugdata)
bugdata$SampleID <- paste(bugdata$StationCode, bugdata$SampleDate, bugdata$Replicate, sep="")
View(bugdata)
View(bugdata)
bugdata <- bugdata[, c("StationCode", "SampleDate", "Replicate", "SampleID", "FinalID", "LifeStageCode", "BAResult", "DistinctCode")]
View(bugdata)
save(bugdata, file="data/bugdata.rdata")
?Sys.sleep
source('~/.active-rstudio-document', echo=TRUE)
R.version[["svn rev"]]
source('~/.active-rstudio-document', echo=TRUE)
?starHTTPD
?startHTTPD
tools:::startHTTPD
tools:::startHTTPD()
?.Call
status <- .Internal(startHTTPD(myInterface, myPort))
if (status == 0) {
unlockBinding("httpdPort", environment(tools:::startDynamicHelp))
assign("httpdPort", myPort, environment(tools:::startDynamicHelp))
s <- Rhttpd$new()
s$listenAddr <- myInterface
s$listenPort <- myPort
# Change this line to your own application. You can add more than one
# application if you like
s$add(name = "test", app = system.file("exampleApps/RookTestApp.R", package = "Rook"))
# Now make the console go to sleep. Of course the web server will still be
# running.
while (TRUE) Sys.sleep(24 * 60 * 60)
}
myPort <- 80
unlockBinding("httpdPort", environment(tools:::startDynamicHelp))
assign("httpdPort", myPort, environment(tools:::startDynamicHelp))
s <- Rhttpd$new()
s$listenAddr <- myInterface
s$listenPort <- myPort
# Change this line to your own application. You can add more than one
# application if you like
s$add(name = "test", app = system.file("exampleApps/RookTestApp.R", package = "Rook"))
# Now make the console go to sleep. Of course the web server will still be
# running.
while (TRUE) Sys.sleep(24 * 60 * 60)
library(roxyegen2)
library(roxygen2)
roxygenise("../BMI_Metrics/")
roxygenise("../BMI_Metrics/")
library(devtools)
build("../BMI_Metrics/")
build("../BMI_Metrics/")
install.packages("BMIMetrics_0.1.tar.gz", repos=NULL, type="source")
build("../BMI_Metrics/",path=".")
install.packages("BMIMetrics_0.1.tar.gz", repos=NULL, type="source")
library(BMIMetrics)
?BMIMetrics
?BMIMetrics
?BMIMetrics-package
?BMI
?BMI
library(BMIMetrics)
?BMI
?BMIMetrics
data(bugdata)
bugdata.agg <- aggregate(bugdata)
bugdata.prc <- sample(bugdata.agg)
Chironomidae_PercentTaxa(bugdata.prc)
Chironomidae_PercentTaxa(bugdata.agg)
bugdata <- BMI(bugdata)
bugdata.agg <- aggregate(bugdata)
bugdata.prc <- sample(bugdata.agg)
Chironomidae_PercentTaxa(bugdata.prc)
Chironomidae_PercentTaxa(bugdata.agg)
data(bugdata)
loadMetaData
loadMetaData()
BMIMetrics:::loadMetaData()
bugdata.agg <- aggregate(bugdata)
traceback()
bugdata <- BMI(bugdata)
bugdata.agg <- aggregate(bugdata)
library(devtools)
build("../BMI_Metrics/", path=".")
detach("package:BMIMetrics")
install.packages("BMIMetrics_0.1.tar.gz", type="source", repos=NULL)
library("BMIMetrics")
?BMIMetrics
library(BMIMetrics)
?BMIMetrics
data(bugdata)
bugdata.agg <- aggregate(bugdata)
bugdata.prc <- sample(bugdata.agg)
Chironomidae_PercentTaxa(bugdata.prc)
library(devtools)
build("../BMI_Metrics/", path=".")
install.packages("BMIMetrics_0.1.tar.gz", type="source", repos=NULL)
library(BMIMetrics)
?BMIMetrics
library(roxygen2)
roxygenise("../BMI_Metrics/")
library(devtools)
build("../BMI_Metrics/", path=".")
install.packages("BMIMetrics_0.1.tar.gz", repos=NULL, type="source")
?BMIMetrics
library(BMIMetrics)
?BMIMetrics
ata(bugdata)
bugdata <- BMI(bugdata)
bugdata.agg <- aggregate(bugdata)
bugdata.prc <- sample(bugdata.agg)
Chironomidae_PercentTaxa(bugdata.prc)
ata(bugdata)
bugdata <- BMI(bugdata)
bugdata.agg <- aggregate(bugdata)
bugdata.prc <- sample(bugdata.agg)
Chironomidae_PercentTaxa(bugdata.prc)
data(bugdata)
bugdata <- BMI(bugdata)
bugdata.agg <- aggregate(bugdata)
bugdata.prc <- sample(bugdata.agg)
method(sample)
methods(sample)
sample.BMI
Chironomidae_PercentTaxa(bugdata.agg)
Chironomidae_PercentTaxa
library(devtools)
library(roxygen)
library(roxygen2)
roxygenize("../BMI_Metrics/")
roxygenize("../BMI_Metrics/")
build("../BMI_Metrics/", path=".")
install.packages("BMIMetrics_0.1.tar.gz", repos=NULL, type="source")
library(BMIMetrics)
?BMIMetrics
data(bugdata)
bugdata <- BMI(bugdata)
bugdata.agg <- aggregate(bugdata)
bugdata.prc <- sample(bugdata.agg)
Chironomidae_PercentTaxa(bugdata.prc)
?sample
?BMIMetrics-Index
?BMIMetrics
??
?help
?BMIMetrics
help(package="BMIMetrics")
Scraper_Percent(bugdata.prc)
roxygenize("../BMI_Metrics/")
library(devtools)
library(roxygen2)
roxygenize("../BMI_Metrics/")
roxygenize("../BMI_Metrics/")
roxygenize("../BMI_Metrics/")
roxygenize("../BMI_Metrics/")
roxygenize("../BMI_Metrics/")
roxygenize("../BMI_Metrics/")
roxygenize("../BMI_Metrics/")
roxygenize("../BMI_Metrics/")
roxygenize("../BMI_Metrics/")
roxygenize("../BMI_Metrics/")
roxygenize("../BMI_Metrics/")
roxygenize("../BMI_Metrics/")
roxygenize("../BMI_Metrics/")
?useDynLib mypackage
?useDynLib
library(devtools)
library(roxygen2)
roxygenize("../BMI_Metrics/")
warnings()
roxygenize("../BMI_Metrics/")
roxygenize("../BMI_Metrics/")
roxygenize("../BMI_Metrics/")
build("../BMI_Metrics/", path=".")
install.packages("BMIMetrics_0.1.tar.gz", repos=NULL, type="source")
library(BMIMetrics)
?BMIMetrics
data(bugdata)
bugdata <- BMI(bugdata)
bugdata.agg <- aggregate(bugdata)
bugdata.prc <- sample(bugdata.agg)
Chironomidae_PercentTaxa(bugdata.prc
)
library(devtools)
library(roxygen2)
roxygenize("../BMI_Metrics/")
build("../BMI_Metrics/", path=".")
library(devtools)
library(roxygen2)
roxygenize("../BMI_Metrics/")
build("../BMI_Metrics/", path=".")
install.packages("BMIMetrics_0.1.tar.gz", repos=NULL, type="source")
library(devtools)
library(roxygen2)
roxygenize("../BMI_Metrics/")
build("../BMI_Metrics/", path=".")
install.packages("BMIMetrics_0.1.tar.gz", repos=NULL, type="source")
library(BMIMetrics)
?BMIMetrics
data(bugdata)
bugdata <- BMI(bugdata)
bugdata.agg <- aggregate(bugdata)
bugdata.prc <- sample(bugdata.agg)
Chironomidae_PercentTaxa(bugdata.prc)
help(package="BMIMetrics")
data(bugdata, package="BMIMetrics")
source('P:/PartTimers/MarkEngeln/BMI_Metrics/R/aggregate.r', echo=TRUE)
options(warn=2)
aggregate(bugdata)
class(bugdata) <- c("BMI", "data.frame")
aggregate(bugdata)
source('P:/PartTimers/MarkEngeln/BMI_Metrics/R/loadMetaData.r', echo=TRUE)
aggregate(bugdata)
library(plyr)
aggregate(bugdata)
traceback()
source('~/.active-rstudio-document', echo=TRUE)
aggregate(bugdata)
?any
source('P:/PartTimers/MarkEngeln/BMI_Metrics/R/aggregate.r', echo=TRUE)
aggregate(bugdata)
source('P:/PartTimers/MarkEngeln/BMI_Metrics/R/aggregate.r', echo=TRUE)
aggregate(bugdata)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
aggregate(bugdata)
library(devtools)
library(roxygen2)
roxygenize("../BMI_Metrics/")
build("../BMI_Metrics/", path=".")
roxygenize("../BMI_Metrics/")
build("../BMI_Metrics/", path=".")
